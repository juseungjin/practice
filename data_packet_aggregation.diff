commit cb6d06a7f166be0e45656a9da2325ce0c16f0c11
Author: Alexander Kolesnikov <akolesni@codeaurora.org>
Date:   Mon Feb 10 15:15:10 2014 +0200

    net: data packets aggregation + fine-tuned buffers
    
    Aggregate data packets into bigger IPC buffers
    and therefore decrease number of "data ready"
    notifications in the WebKit queue.
    
    Change-Id: I1f59247f055e0cd40738aae941c9d28d9c7de5b8

diff --git a/content/browser/loader/async_resource_handler.cc b/content/browser/loader/async_resource_handler.cc
index 87d82ca..20010c0 100644
--- a/content/browser/loader/async_resource_handler.cc
+++ b/content/browser/loader/async_resource_handler.cc
@@ -1,4 +1,5 @@
 // Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Copyright (c) 2014 The Linux Foundation. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
@@ -30,6 +31,8 @@
 #include "net/base/net_log.h"
 #include "net/base/net_util.h"
 #include "net/url_request/redirect_info.h"
+#include "net/libnetxt/plugin_api.h"
+#include "net/stat_hub/stat_hub_api.h"
 
 using base::TimeTicks;
 
@@ -38,6 +41,8 @@ namespace {
 
 static int kBufferSize = 1024 * 512;
 static int kMinAllocationSize = 1024 * 4;
+static int kCalibratedBufSize = 1500;
+static int kMaxAllocationSizeAggregated = 1024 * 64;
 static int kMaxAllocationSize = 1024 * 32;
 
 void GetNumericArg(const std::string& name, int* result) {
@@ -88,7 +93,8 @@ AsyncResourceHandler::AsyncResourceHandler(
       has_checked_for_sufficient_resources_(false),
       sent_received_response_msg_(false),
       sent_first_data_msg_(false),
-      reported_transfer_size_(0) {
+      reported_transfer_size_(0),
+      bytes_read_(0) {
   InitializeResourceBufferConstants();
 }
 
@@ -137,8 +143,8 @@ bool AsyncResourceHandler::OnUploadProgress(uint64 position,
 
 bool AsyncResourceHandler::OnRequestRedirected(
     const net::RedirectInfo& redirect_info,
-    ResourceResponse* response,
-    bool* defer) {
+                                               ResourceResponse* response,
+                                               bool* defer) {
   const ResourceRequestInfoImpl* info = GetRequestInfo();
   if (!info->filter())
     return false;
@@ -228,6 +234,25 @@ bool AsyncResourceHandler::OnBeforeNetworkStart(const GURL& url, bool* defer) {
   return true;
 }
 
+bool AsyncResourceHandler::IsAggregationEnabled() {
+  static int aggregation_enabled_ = -1;
+  if (-1==aggregation_enabled_) {
+    char value[PROPERTY_VALUE_MAX] = { '\0' };
+    LIBNETXT_API(SysPropertyGet)( "net.ipc.buf.agg.on", value, "1");
+    aggregation_enabled_  = atoi(value);
+    LIBNETXT_LOGI("Buffer Aggregation is: %s", (aggregation_enabled_)?"On":"Off");
+  }
+
+  const ResourceRequestInfoImpl* info = GetRequestInfo();
+  if (!info->filter())
+    return false;
+
+  return
+    ((aggregation_enabled_>0)?true:false) &&
+    (info->GetResourceType() != ResourceType:: RESOURCE_TYPE_MAIN_FRAME) &&
+    (info->GetResourceType() != ResourceType:: RESOURCE_TYPE_SUB_FRAME);
+}
+
 bool AsyncResourceHandler::OnWillRead(scoped_refptr<net::IOBuffer>* buf,
                                       int* buf_size,
                                       int min_size) {
@@ -237,11 +262,39 @@ bool AsyncResourceHandler::OnWillRead(scoped_refptr<net::IOBuffer>* buf,
     return false;
 
   DCHECK(buffer_->CanAllocate());
+
+  if(IsAggregationEnabled()) {
+    if (bytes_read_) {
+      *buf = new DependentIOBuffer(buffer_.get(), last_allocation_memory_ + bytes_read_);
+      *buf_size = allocation_size_ - bytes_read_;
+    }
+    else {
   char* memory = buffer_->Allocate(&allocation_size_);
   CHECK(memory);
 
+      last_allocation_memory_ = memory;
   *buf = new DependentIOBuffer(buffer_.get(), memory);
   *buf_size = allocation_size_;
+    }
+  }
+  else {
+    char* memory = buffer_->Allocate(&allocation_size_);
+    CHECK(memory);
+
+    *buf = new DependentIOBuffer(buffer_.get(), memory);
+    *buf_size = allocation_size_;
+  }
+
+  static int calibrated_buf_enabled_ = -1;
+  if (-1==calibrated_buf_enabled_) {
+    char value[PROPERTY_VALUE_MAX] = { '\0' };
+    LIBNETXT_API(SysPropertyGet)( "net.ipc.buf.clb.on", value, "0");
+    calibrated_buf_enabled_  = atoi(value);
+  }
+
+  if(calibrated_buf_enabled_>0 && *buf_size>kCalibratedBufSize) {
+    *buf_size = kCalibratedBufSize;
+  }
 
   UMA_HISTOGRAM_CUSTOM_COUNTS(
       "Net.AsyncResourceHandler_SharedIOBuffer_Alloc",
@@ -252,8 +305,30 @@ bool AsyncResourceHandler::OnWillRead(scoped_refptr<net::IOBuffer>* buf,
 bool AsyncResourceHandler::OnReadCompleted(int bytes_read, bool* defer) {
   DCHECK_GE(bytes_read, 0);
 
+  if(IsAggregationEnabled()) {
+    if (!bytes_read) {
+      if (!bytes_read_) {
+        return true;
+      }
+      //EOF - send message
+    }
+    else {
+      bytes_read_ += bytes_read;
+      if (bytes_read_<allocation_size_ && sent_first_data_msg_) {
+        return true;
+      }
+      //EOC - send message
+    }
+    bytes_read = bytes_read_;
+    bytes_read_ = 0;
+    if (STAT_HUB_IS_VERBOSE_LEVEL_DEBUG) {
+        LIBNETXT_LOGD("Send aggregated buffer with size: %d", bytes_read);
+    }
+  }
+  else {
   if (!bytes_read)
     return true;
+  }
 
   ResourceMessageFilter* filter = GetFilter();
   if (!filter)
@@ -379,10 +454,15 @@ bool AsyncResourceHandler::EnsureResourceBufferIsInitialized() {
     }
   }
 
+  int allocation_size = kMaxAllocationSize;
+  if(IsAggregationEnabled()) {
+    allocation_size = kMaxAllocationSizeAggregated;
+  }
+
   buffer_ = new ResourceBuffer();
   return buffer_->Initialize(kBufferSize,
                              kMinAllocationSize,
-                             kMaxAllocationSize);
+                             allocation_size);
 }
 
 void AsyncResourceHandler::ResumeIfDeferred() {
diff --git a/content/browser/loader/async_resource_handler.h b/content/browser/loader/async_resource_handler.h
index 6842b19..0926406 100644
--- a/content/browser/loader/async_resource_handler.h
+++ b/content/browser/loader/async_resource_handler.h
@@ -1,4 +1,5 @@
 // Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Copyright (c) 2014 The Linux Foundation. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
@@ -61,6 +62,8 @@ class AsyncResourceHandler : public ResourceHandler,
   void ResumeIfDeferred();
   void OnDefer();
 
+  bool IsAggregationEnabled();
+
   scoped_refptr<ResourceBuffer> buffer_;
   ResourceDispatcherHostImpl* rdh_;
 
@@ -78,6 +81,9 @@ class AsyncResourceHandler : public ResourceHandler,
 
   int64_t reported_transfer_size_;
 
+  int bytes_read_;
+  char* last_allocation_memory_;
+
   DISALLOW_COPY_AND_ASSIGN(AsyncResourceHandler);
 };
 
